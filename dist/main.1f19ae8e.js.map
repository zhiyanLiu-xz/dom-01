{"version":3,"sources":["main.js"],"names":["div","dom","creat","console","log","after","test","div3","wrap","nodes","empty","window","attr","title","text","style","border","color","class","add","remove","has","fn","on","off","testDiv","find","test2","parent","s2","siblings","next","previous","t","each","children","n","index"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["// document.createElement('div')\r\nconst div = dom.creat(\"<div><span>newDiv</span></div>\"); //创建一个节点\r\nconsole.log(div);\r\n\r\ndom.after(test, div);\r\n\r\nconst div3 = dom.creat('<div id=\"parent\"></div>'); //新建\r\ndom.wrap(test, div3); //把test包到div3里面\r\n\r\nconst nodes = dom.empty(window.empty);\r\nconsole.log(nodes);\r\n\r\ndom.attr(test, \"title\", \"Hi,I am Lzy\"); //dom.attr三个参数实现写\r\nconst title = dom.attr(test, \"title\"); //用dom.attr函数两个参数获取test的title属性\r\nconsole.log(`title: ${title}`);\r\n\r\ndom.text(test, \"你好，这是新的文本内容\");\r\n//一般用这个是将标签里的内容（文本和标签）全部覆盖，如果想要只覆盖一部分，就用span将其抱起来，给一个特定的id即可，然后针对id操作即可\r\ndom.text(test); //读取文本内容\r\n\r\ndom.style(test, { border: \"1px solid red\", color: \"blue\" }); //参数是对象就是设置它的值\r\nconsole.log(dom.style(test, \"border\")); //参数是字符串就是读取元素的border\r\ndom.style(test, \"border\", \"1px solid black\"); //设置，把test的border改成'1px solid black'\r\n\r\ndom.class.add(test, \"red\");\r\ndom.class.add(test, \"blue\");\r\ndom.class.remove(test, \"blue\");\r\nconsole.log(dom.class.has(test, \"blue\")); //检测是否含有blue\r\n\r\nconst fn = () => {\r\n  console.log(\"点击了\");\r\n};\r\ndom.on(test, \"click\", fn); //添加了点击监听\r\ndom.off(test, \"click\", fn); //移除了监听\r\n\r\nconst testDiv = dom.find(\"#test\")[0]; //数组\r\nconsole.log(testDiv);\r\nconst test2 = dom.find(\"#test2\")[0];\r\nconsole.log(dom.find(\".red\", test2)[0]); //后面是找的范围，默认在test2里面找\r\n\r\nconsole.log(dom.parent(test));\r\n\r\nconst s2 = dom.find(\"#s2\")[0];\r\nconsole.log(dom.siblings(s2));\r\nconsole.log(dom.next(s2));\r\nconsole.log(dom.previous(s2));\r\n\r\nconst t = dom.find(\"#travel\")[0];\r\ndom.each(dom.children(t), (n) => dom.style(n, \"color\", \"red\")); //遍历所有节点\r\n\r\nconsole.log(dom.index(s2));\r\n"]}